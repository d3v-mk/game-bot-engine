/**
 * ü§ñ Inicializa√ß√£o do Bot WhatsApp com whatsapp-web.js
 *
 * Esse script cria e inicia um bot no WhatsApp usando a biblioteca `whatsapp-web.js`.
 * Ele autentica via QR code, escuta mensagens e responde de forma personalizada.
 * 
 * üìå Funcionalidades:
 * - Gera√ß√£o de QR code para login via terminal
 * - Autentica√ß√£o persistente com `LocalAuth`
 * - Resposta autom√°tica via fun√ß√£o `onMessage`
 * 
 * Obs: Ideal para bots simples que interagem via WhatsApp Web.
 * Rode: node game/index.js
 */

import pkg from 'whatsapp-web.js'; // Importa o pacote principal do WhatsApp Web API
import qrcode from 'qrcode-terminal'; // Utilit√°rio para mostrar o QR code no terminal
import onMessage from './handlers/onMessage.js'; // Fun√ß√£o personalizada para lidar com mensagens recebidas

const { Client, LocalAuth } = pkg; // Desestrutura as classes Client e LocalAuth do pacote

// Cria a inst√¢ncia do cliente do WhatsApp com autentica√ß√£o local e configs do Puppeteer
const client = new Client({
  authStrategy: new LocalAuth(), // Salva a sess√£o localmente pra n√£o precisar logar toda vez
  puppeteer: {
    headless: true, // Roda o navegador em modo invis√≠vel (sem GUI)
    args: ['--no-sandbox', '--disable-setuid-sandbox'] // Flags de seguran√ßa, √∫teis em servidores
  }
});

// Evento disparado quando o QR code √© gerado (para login no WhatsApp)
client.on('qr', qr => {
  console.log('üì∏ Escaneie o QR code abaixo para logar no WhatsApp:');
  qrcode.generate(qr, { small: true }); // Mostra o QR code no terminal
});

// Evento disparado quando o bot est√° pronto para uso
client.on('ready', () => {
  console.log('‚úÖ Bot conectado ao WhatsApp!');
});

// Evento disparado a cada nova mensagem recebida
client.on('message', async msg => {
  try {
    await onMessage(msg); // Passa a mensagem para o handler externo
  } catch (e) {
    console.error('‚ùå Erro ao processar mensagem:', e); // Captura e exibe erros
  }
});

// Inicializa o cliente (abre o navegador e inicia a sess√£o)
client.initialize();
